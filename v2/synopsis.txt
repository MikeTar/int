1. Header <wide_int> synopsis
namespace std {
template<int bits, bool sgn> class wide_int;

template<int bits, bool sgn> constexpr wide_int<bits,sgn> operator~(const wide_int<bits,sgn>&) noexcept;
template<int bits, bool sgn> constexpr wide_int<bits,sgn> operator-(const wide_int<bits,sgn>&) noexcept;
template<int bits, bool sgn> constexpr wide_int<bits,sgn> operator+(const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr wide_int<bits,sgn> operator*(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator*(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator*(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr wide_int<bits,sgn> operator/(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator/(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator/(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr wide_int<bits,sgn> operator%(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator%(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator%(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr wide_int<bits,sgn> operator+(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator+(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator+(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr wide_int<bits,sgn> operator-(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator-(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator-(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr wide_int<bits,sgn> operator&(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator&(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator&(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr wide_int<bits,sgn> operator|(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator|(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator|(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr wide_int<bits,sgn> operator^(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator^(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr unspecified operator^(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator<(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator<(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator<(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator>(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator>(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator>(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator<=(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator<=(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator<=(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator>=(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator>=(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator>=(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator==(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator==(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator==(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator<<(const wide_int<bits,sgn>&, int) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator>>(const wide_int<bits,sgn>&, int) noexcept;


using int128_t = wide_int<128,true>;
using uint128_t = wide_int<128,false>;

using int256_t = wide_int<256,true>;
using uint256_t = wide_int<256,false>;

using int512_t = wide_int<512,true>;
using uint512_t = wide_int<512,false>;

constexpr int128_t operator "" _int128(const char*) noexcept;
constexpr int256_t operator "" _int256(const char*) noexcept;
constexpr int512_t operator "" _int512(const char*) noexcept;
constexpr uint128_t operator "" _uint128(const char*) noexcept;
constexpr uint256_t operator "" _uint256(const char*) noexcept;
constexpr uint512_t operator "" _uint512(const char*) noexcept;


template<int bits, bool sgn> std::string to_string(const wide_int<bits,sgn>&);
template<int bits, bool sgn> std::ostream& operator<<(std::ostream&, const wide_int<bits,sgn>&);

template<int bits, bool sgn> struct numeric_limits<wide_int<bits,sgn>>;

template<int bits,bool sgn> struct is_scalar<wide_int<bits,sgn>>;
template<int bits,bool sgn> struct is_compound<wide_int<bits,sgn>>;
template<int bits,bool sgn> struct is_unsigned<wide_int<bits,sgn>>;
template<int bits,bool sgn> struct is_signed<wide_int<bits,sgn>>;
} // namespace std



Note 1. The header <wide_int> defines one class template (wide_int) and a series of related function templates for representing and manipulating arrays of values.
Note 2. Only two library functions (to_string(), operator<<(std::ostream&)) are permitted to throw exceptions.

2. Class template wide_int
2.1. Class template wide_int overview

namespace std {
template<int bits, bool sgn>
class wide_int {
public:
    // 2.2. construct
    wide_int() = default;
    template<typename T> constexpr wide_int(T) noexcept;
    template<int bits2, bool sgn2> constexpr wide_int(const wide_int<bits2,sgn2>&) noexcept;

    // 2.3. assignment
    template<typename T>
    constexpr wide_int<bits,sgn>& operator=(T) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator=(const wide_int<bits2,sgn2>&) noexcept;

    // 2.4. compound assignment
    template<typename T>
    constexpr wide_int<bits,sgn>& operator*=(const T&) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator*=(const wide_int<bits2,sgn2>&) noexcept;

    template<typename T>
    constexpr wide_int<bits,sgn>& operator/=(const T&) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator/=(const wide_int<bits2,sgn2>&) noexcept;

    template<typename T>
    constexpr wide_int<bits,sgn>& operator%=(const T&) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator%=(const wide_int<bits2,sgn2>&) noexcept;

    template<typename T>
    constexpr wide_int<bits,sgn>& operator+=(const T&) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator+=(const wide_int<bits2,sgn2>&) noexcept;

    template<typename T>
    constexpr wide_int<bits,sgn>& operator-=(const T&) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator-=(const wide_int<bits2,sgn2>&) noexcept;

    template<typename T>
    constexpr wide_int<bits,sgn>& operator&=(const T&) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator&=(const wide_int<bits2,sgn2>&) noexcept;

    template<typename T>
    constexpr wide_int<bits,sgn>& operator|=(const T&) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator|=(const wide_int<bits2,sgn2>&) noexcept;

    template<typename T>
    constexpr wide_int<bits,sgn>& operator^=(const T&) noexcept;
    template<int bits2, bool sgn2>
    constexpr wide_int<bits,sgn>& operator^=(const wide_int<bits2,sgn2>&) noexcept;

    // 2.5. casts
    template <class T> constexpr operator T () const noexcept;
    constexpr explicit operator bool () const noexcept;
};

} // namespace std


2.2. wide_int constructors
2.2.1. wide_int() = default;
Constructs an object with undefined value

2.2.2. template<typename T> constexpr wide_int(T) noexcept;
Constructs an object from T, where T is built-in arithmetic types

2.2.3. template<int bits2, bool sgn2> constexpr wide_int(const wide_int<bits2,sgn2>&) noexcept;
Constructs an object from other wide_int. Can be used as copy-constructor

2.3. wide_int asignments
template<typename T>
constexpr wide_int<bits,sgn>& operator=(T other) noexcept;
template<int bits2, bool sgn2>
constexpr wide_int<bits,sgn>& operator=(const wide_int<bits2,sgn2>& other) noexcept;
Assignes value of other to *this. Postcondition: other == *this

2.4. wide_int compound assignment
template<int bits2, bool sgn2> constexpr wide_int<bits,sgn>& operator*=(const wide_int<bits2,sgn2>&) noexcept;
template<int bits2, bool sgn2> constexpr wide_int<bits,sgn>& operator/=(const wide_int<bits2,sgn2>&) noexcept;
template<int bits2, bool sgn2> constexpr wide_int<bits,sgn>& operator%=(const wide_int<bits2,sgn2>&) noexcept;
template<int bits2, bool sgn2> constexpr wide_int<bits,sgn>& operator+=(const wide_int<bits2,sgn2>&) noexcept;
template<int bits2, bool sgn2> constexpr wide_int<bits,sgn>& operator-=(const wide_int<bits2,sgn2>&) noexcept;
template<int bits2, bool sgn2> constexpr wide_int<bits,sgn>& operator&=(const wide_int<bits2,sgn2>&) noexcept;
template<int bits2, bool sgn2> constexpr wide_int<bits,sgn>& operator|=(const wide_int<bits2,sgn2>&) noexcept;
template<int bits2, bool sgn2> constexpr wide_int<bits,sgn>& operator^=(const wide_int<bits2,sgn2>&) noexcept;

template<typename T> constexpr wide_int<bits,sgn>& operator*=(const T&) noexcept;
template<typename T> constexpr wide_int<bits,sgn>& operator/=(const T&) noexcept;
template<typename T> constexpr wide_int<bits,sgn>& operator%=(const T&) noexcept;
template<typename T> constexpr wide_int<bits,sgn>& operator+=(const T&) noexcept;
template<typename T> constexpr wide_int<bits,sgn>& operator-=(const T&) noexcept;
template<typename T> constexpr wide_int<bits,sgn>& operator&=(const T&) noexcept;
template<typename T> constexpr wide_int<bits,sgn>& operator|=(const T&) noexcept;
template<typename T> constexpr wide_int<bits,sgn>& operator^=(const T&) noexcept;

Behavior of these operators is similar to operators for built-in arithmetic types

2.5. wide_int casts
template <class T> constexpr operator T () const noexcept;
constexpr explicit operator bool () const noexcept;

These cast are acceptable only for built-in types


3. Free non-member operators and functions for wide_int
3.1. wide_int binary operators
template<int bits, bool sgn, int bits2, bool sgn2>
constexpr unspecified operator*(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator*(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator*(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr unspecified operator/(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator/(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator/(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr unspecified operator%(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator%(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator%(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr unspecified operator+(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator+(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator+(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr unspecified operator-(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator-(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator-(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr unspecified operator&(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator&(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator&(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr unspecified operator|(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator|(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator|(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr unspecified operator^(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator^(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator^(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator<<(const wide_int<bits,sgn>&, int) noexcept;
template<int bits, bool sgn, typename T>
constexpr wide_int<bits,sgn> operator>>(const wide_int<bits,sgn>&, int) noexcept;

3.2. wide_int logical operators
template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator<(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator<(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator<(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator>(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator>(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator>(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator<=(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator<=(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator<=(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator>=(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator>=(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator>=(const T&, const wide_int<bits,sgn>&) noexcept;

template<int bits, bool sgn, int bits2, bool sgn2>
constexpr bool operator==(const wide_int<bits,sgn>&, const wide_int<bits2,sgn2>&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator==(const wide_int<bits,sgn>&, const T&) noexcept;
template<int bits, bool sgn, typename T>
constexpr bool operator==(const T&, const wide_int<bits,sgn>&) noexcept;

3.3. wide_int unary operators
template<int bits, bool sgn> constexpr wide_int<bits,sgn> operator~(const wide_int<bits,sgn>&) noexcept;
template<int bits, bool sgn> constexpr wide_int<bits,sgn> operator-(const wide_int<bits,sgn>&) noexcept;
template<int bits, bool sgn> constexpr wide_int<bits,sgn> operator+(const wide_int<bits,sgn>&) noexcept;

3.4. wide_int definitions
using int128_t = wide_int<128,true>;
using uint128_t = wide_int<128,false>;

using int256_t = wide_int<256,true>;
using uint256_t = wide_int<256,false>;

using int512_t = wide_int<512,true>;
using uint512_t = wide_int<512,false>;

3.5. wide_int literals
constexpr int128_t operator "" _int128(const char*) noexcept;
constexpr int256_t operator "" _int256(const char*) noexcept;
constexpr int512_t operator "" _int512(const char*) noexcept;
constexpr uint128_t operator "" _uint128(const char*) noexcept;
constexpr uint256_t operator "" _uint256(const char*) noexcept;
constexpr uint512_t operator "" _uint512(const char*) noexcept;

3.5. wide_int specializations
3.5.1. Serialization
template<int bits,bool sgn> std::string to_string(const wide_int<bits,sgn>&);
template<int bits,bool sgn> std::ostream& operator<<(std::ostream&, const wide_int<bits,sgn>&);

3.5.2. Numeric limits
template<int bits,bool sgn> struct numeric_limits<wide_int<bits,sgn>>;

3.5.3. Type triats
template<int bits,bool sgn> struct is_scalar<wide_int<bits,sgn>>;
template<int bits,bool sgn> struct is_compound<wide_int<bits,sgn>>;
template<int bits,bool sgn> struct is_unsigned<wide_int<bits,sgn>>;
template<int bits,bool sgn> struct is_signed<wide_int<bits,sgn>>;
